*picker.txt* A fuzzy picker for Neovim and Vim                            *picker*

==============================================================================
CONTENTS                                                       *picker-contents*

    1. About .....................................|picker-about|
    2. Commands ..................................|picker-commands|
    3. Mappings ..................................|picker-mappings|
    4. Configuration .............................|picker-configuration|
    5. Functions .................................|picker-functions|
    6. Issues ....................................|picker-issues|
    7. Licence ...................................|picker-licence|

==============================================================================
ABOUT                                                             *picker-about*

vim-picker is a fuzzy file, buffer, and tag picker for Neovim and Vim.

==============================================================================
COMMANDS                                                       *picker-commands*

vim-picker provides the following commands:

                                                            *picker-:PickerEdit*
:PickerEdit [directory]    Pick a file to edit in the current window. This
                           takes a optional argument, which is the directory in
                           which to run the file listing tool. If not specified,
                           this defaults to the current working directory.

                                                           *picker-:PickerSplit*
:PickerSplit [directory]   Pick a file to edit in a new horizontal split. This
                           takes an optional directory argument in the same
                           manner as |:PickerEdit|.

                                                         *picker-:PickerTabedit*
:PickerTabedit [directory] Pick a file to edit in a new tab. This takes an
                           optional directory argument in the same manner as
                           |:PickerEdit|.

                                                         *picker-:PickerTabdrop*
:PickerTabdrop [directory] Pick a file to edit in a new tab if no tab already
                           contains it or jump to the tab containing it. This
                           takes an optional directory argument in the same
                           manner as |:PickerEdit|.

                                                          *picker-:PickerVsplit*
:PickerVsplit [directory]  Pick a file to edit in a new vertical split. This
                           takes an optional directory argument in the same
                           manner as |:PickerEdit|.

                                                          *picker-:PickerBuffer*
:PickerBuffer              Pick a buffer to edit in the current window.

                                                     *picker-:PickerBufferSplit*
:PickerBufferSplit         Pick a buffer to edit in a new horizontal split.

                                                    *picker-:PickerBufferVsplit*
:PickerBufferVsplit        Pick a buffer to edit in a new vertical split.

                                                             *picker-:PickerTag*
:PickerTag                 Pick a tag to jump to in the current window.

                                                            *picker-:PickerStag*
:PickerStag                Pick a tag to jump to in a new horizontal split.

                                                       *picker-:PickerBufferTag*
:PickerBufferTag           Pick a tag from the current buffer to jump to.

                                                            *picker-:PickerHelp*
:PickerHelp                Pick a help tag to jump to in the current window.

==============================================================================
MAPPINGS                                                       *picker-mappings*

vim-picker provides the following |<Plug>| mappings:

<Plug>(PickerEdit)                  Execute :PickerEdit
<Plug>(PickerSplit)                 Execute :PickerSplit
<Plug>(PickerTabedit)               Execute :PickerTabedit
<Plug>(PickerVsplit)                Execute :PickerVsplit
<Plug>(PickerBuffer)                Execute :PickerBuffer
<Plug>(PickerBufferSplit)           Execute :PickerBufferSplit
<Plug>(PickerBufferVsplit)          Execute :PickerBufferVsplit
<Plug>(PickerTag)                   Execute :PickerTag
<Plug>(PickerStag)                  Execute :PickerStag
<Plug>(PickerBufferTag)             Execute :PickerBufferTag
<Plug>(PickerHelp)                  Execute :PickerHelp

==============================================================================
CONFIGURATION                                             *picker-configuration*

By default, vim-picker uses Git to list files inside Git repositories. In
directories which are not inside a Git repository, vim-picker will use `fd`
(https://github.com/sharkdp/fd) to list files, falling back to `find` if `fd`
is not available.

To use an alternative method of listing files, for example because you want to
customise the flags passed to Git, because you use a different version control
system, or because you want to use an alternative to `fd` or `find`, a custom
file listing tool can be used.

To use a custom file listing tool, set `g:picker_custom_find_executable` and
`g:picker_custom_find_flags` in your |vimrc|. For example, to use ripgrep
(https://github.com/BurntSushi/ripgrep) set:
>
    let g:picker_custom_find_executable = 'rg'
    let g:picker_custom_find_flags = '--color never --files'
<
If `g:picker_custom_find_executable` is set, and the executable it references
is found, it will always be used in place of Git, `fd`, or `find`. Therefore
you may want to make `g:picker_custom_find_executable` a wrapper script that
implements your own checks and fallbacks: for example using `hg` in Mercurial
repositories, `ripgrep` elsewhere, and falling back to `find` if `ripgrep` is
not installed.

By default vim-picker will use `fzy` (https://github.com/jhawthorn/fzy) as the
fuzzy selector. You can change this by setting `g:picker_selector_executable`
and `g:picker_selector_flags` in your |vimrc|. For example, to use `pick`
(https://github.com/mptre/pick) set:
>
    let g:picker_selector_executable = 'pick'
    let g:picker_selector_flags = ''
<
By default, vim-picker will run the fuzzy selector in a full width split at
the bottom of the window, using |:botright|. You can change this by setting
`g:picker_split` in your |vimrc|. For example, to open a full width split at
the top of the window, set:
>
    let g:picker_split = 'topleft'
<
See |opening-window| for other valid values.

To specify the height of the window in which the fuzzy selector is opened, set
`g:picker_height` in your |vimrc|. The default is 10 lines:
>
    let g:picker_height = 10
<

==============================================================================
FUNCTIONS                                                     *picker-functions*

                                                               *picker#String()*
picker#String({shell_command}, {vim_command})
    Select a string from the candidates generated by the command
    {shell_command}, and pass it as an argument to {vim_command}.

    {vim_command} is a string specifying the Vim command which will be called
    with the user's selection as a single argument.

    {shell_command} is a string specifying a shell command consisting of
    either a single command or a series of piped commands that will generate a
    newline separated list of candidates to be piped to the fuzzy selector.

                                                                 *picker#File()*
picker#File({shell_command}, {vim_command}, {options})
    Select a file from the candidates generated by the command
    {shell_command}, and pass it as an argument to {vim_command}, escaping
    special characters and spaces.

    This function is equivalent to |picker#String()| except it additionally
    escapes spaces and special characters in the selection for use as a
    filename.

    See |picker#String()| for details of the {shell_command} and
    {vim_command} arguments.

    {options} is an optional dictionary which changes the behaviour of
    |picker#File()|, with optional keys {cwd} and {line_handler}.

    {cwd} controls where {shell_command} will be run. It must be a string.

    {line_handler} must be the name of a function taking a single argument,
    and must return a dictionary. This function will be called for every user
    selection and allows the user to do some preprocessing, for example to
    strip extra information or to extract line and column information. The
    returned dictionary can have the following keys:

    - `filename`: the name of the file to open. Mandatory.
    - `line`: the line to go to in the file. Optional.
    - `column`: the column to go to in the line. Optional.

    As an example, suppose {shell_command} outputs lines of the format:
>
    20:main.c
    45:foobar.h
<
    the following {line_handler} will extract both file and line position:
>
    function! PickerLineHandler(selection) abort
        let parts = split(a:selection, ':')
        return {'filename': parts[0], 'line': parts[1]}
    endfunction
<

==============================================================================
ISSUES                                                           *picker-issues*

Bug reports and patches are welcome on the issue tracker at
https://github.com/srstevenson/vim-picker/issues

==============================================================================
LICENCE                                                         *picker-licence*

Copyright Â© 2016-2021 Scott Stevenson.

vim-picker is distributed under the terms of the ISC licence.

==============================================================================
vim:et:ft=help:sts=4:tw=78:
